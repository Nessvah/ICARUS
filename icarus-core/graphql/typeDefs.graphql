scalar JSON
scalar GraphQLDate
scalar MySQLDate

input ComparisonOperators {
  _eq: String
  _neq: String
  _lt: String
  _lte: String
  _gt: String
  _gte: String
  _in: String
  _nin: String
  _like: String
}

# define the root Query
type Query {
  tables: [TableInfo]
  icarus(input: IcarusListOptions = {}): [Icarus]
  icarusCount(input: IcarusCount): IcarusCountResult
}

type Mutation {
  authorize(input: AuthorizeUser!): AuthPayload!
  icarus(input: IcarusMutationOptions): IcarusOutput
}

input NestedFiltering {
  _and: [NestedFiltering]
  _or: [NestedFiltering]
  name: ComparisonOperators
}

input IcarusCount {
  _count: Int
}

type IcarusCountResult {
  action: String
  count: Int!
}

input IcarusSortOptions {
  id: Sort
  name: Sort
}

input IcarusLogicalOp {
  _and: [IcarusLogicalOp]
  _or: [IcarusLogicalOp]
  id: ComparisonOperators
  name: ComparisonOperators
}

input IcarusMutationOptions {
  _create: IcarusInput
  _update: IcarusUpDel
  _delete: IcarusDelete
}

input IcarusListOptions {
  filter: IcarusFilter
  skip: Int
  take: Int = 15
  sort: IcarusSortOptions
}

type Icarus {
  id: ID!
  name: String!
}

input IcarusInput {
  name: String!
}

input IcarusFilter {
  _and: [IcarusLogicalOp]
  _or: [IcarusLogicalOp]
}

input IcarusUpDel {
  name: String
  filter: IcarusFilter
}

type IcarusOutput {
  created: [Icarus]!
  updated: [Icarus]!
  deleted: Int
}

input IcarusDelete {
  filter: IcarusFilter
}

input IcarusSort {
  name: Sort
}

enum ActionType {
  COUNT
  CREATE
  UPDATE
  DELETE
}

enum Sort {
  ASC
  DESC
}

input AuthorizeUser {
  email: String!
  password: String!
}

input RoleInput {
  role: String!
}

type AuthPayload {
  token: Token!
}

type Token {
  accessToken: String!
  idToken: String!
  refreshToken: String!
}

type TableInfo {
  table: String
  structure: String
}
