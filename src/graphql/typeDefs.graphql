
    input ComparisonOperators {
      _eq: String
_neq: String
_lt: String
_lte: String
_gt: String
_gte: String
_in: String
_nin: String
_like: String
    }


# define the root Query
type Query {
  tables: [TableInfo]
    categories(input: CategoriesListOptions = {}): [Categories]
customers(input: CustomersListOptions = {}): [Customers]
order_items(input: Order_itemsListOptions = {}): [Order_items]
orders(input: OrdersListOptions = {}): [Orders]
payment(input: PaymentListOptions = {}): [Payment]
product_reviews(input: Product_reviewsListOptions = {}): [Product_reviews]
products(input: ProductsListOptions = {}): [Products]
shipments(input: ShipmentsListOptions = {}): [Shipments]
users(input: UsersListOptions = {}): [Users]
user_role(input: User_roleListOptions = {}): [User_role]
    categoriesCount(input: CategoriesCount): CategoriesCountResult
customersCount(input: CustomersCount): CustomersCountResult
order_itemsCount(input: Order_itemsCount): Order_itemsCountResult
ordersCount(input: OrdersCount): OrdersCountResult
paymentCount(input: PaymentCount): PaymentCountResult
product_reviewsCount(input: Product_reviewsCount): Product_reviewsCountResult
productsCount(input: ProductsCount): ProductsCountResult
shipmentsCount(input: ShipmentsCount): ShipmentsCountResult
usersCount(input: UsersCount): UsersCountResult
user_roleCount(input: User_roleCount): User_roleCountResult

}

# define the root Muation
type Mutation {
  authorize(input: AuthorizeUser!): AuthPayload!
    categories(input: CategoriesMutationOptions): CategoriesOutput
customers(input: CustomersMutationOptions): CustomersOutput
order_items(input: Order_itemsMutationOptions): Order_itemsOutput
orders(input: OrdersMutationOptions): OrdersOutput
payment(input: PaymentMutationOptions): PaymentOutput
product_reviews(input: Product_reviewsMutationOptions): Product_reviewsOutput
products(input: ProductsMutationOptions): ProductsOutput
shipments(input: ShipmentsMutationOptions): ShipmentsOutput
users(input: UsersMutationOptions): UsersOutput
user_role(input: User_roleMutationOptions): User_roleOutput
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     category_id: ComparisonOperators
category_name: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
  }


  input CategoriesCount {
    _count: Int
  } 


  type CategoriesCountResult {
   action: String
    count: Int!
  }


input CategoriesLogicalOp {
  _and: [ CategoriesLogicalOp]
  _or: [ CategoriesLogicalOp]
   category_id: ComparisonOperators
category_name: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
}

input CategoriesMutationOptions {
    _create: CategoriesInput
    _update: CategoriesUpDel
    _delete: CategoriesDelete
    }

input CategoriesSortOptions {
  category_id: Sort
category_name: Sort
icon_class: Sort
icon_label: Sort
}

input CategoriesListOptions {
    filter: CategoriesFilter
    skip: Int
    take: Int = 15
    sort: CategoriesSortOptions
    }

type Categories {
    category_id: ID!
category_name: String!
icon_class: String
icon_label: String
}

input CategoriesInput {
    category_name: String!
icon_class: String
icon_label: String
}

input CategoriesFilter {
  _and: [ CategoriesLogicalOp]
  _or: [ CategoriesLogicalOp]
}

input CategoriesUpDel {
    category_name: String
icon_class: String
icon_label: String
       filter: CategoriesFilter
}

type CategoriesOutput {
	created: [Categories]!
	updated: [Categories]!
	deleted: Int
}

input CategoriesDelete {
       filter: CategoriesFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     customer_id: ComparisonOperators
customer_name: ComparisonOperators
email: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
  }


  input CustomersCount {
    _count: Int
  } 


  type CustomersCountResult {
   action: String
    count: Int!
  }


input CustomersLogicalOp {
  _and: [ CustomersLogicalOp]
  _or: [ CustomersLogicalOp]
   customer_id: ComparisonOperators
customer_name: ComparisonOperators
email: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
}

input CustomersMutationOptions {
    _create: CustomersInput
    _update: CustomersUpDel
    _delete: CustomersDelete
    }

input CustomersSortOptions {
  customer_id: Sort
customer_name: Sort
email: Sort
icon_class: Sort
icon_label: Sort
}

input CustomersListOptions {
    filter: CustomersFilter
    skip: Int
    take: Int = 15
    sort: CustomersSortOptions
    }

type Customers {
    customer_id: Int!
customer_name: String!
email: String!
icon_class: String
icon_label: String
}

input CustomersInput {
    customer_name: String!
email: String!
icon_class: String
icon_label: String
}

input CustomersFilter {
  _and: [ CustomersLogicalOp]
  _or: [ CustomersLogicalOp]
}

input CustomersUpDel {
    customer_name: String
email: String
icon_class: String
icon_label: String
       filter: CustomersFilter
}

type CustomersOutput {
	created: [Customers]!
	updated: [Customers]!
	deleted: Int
}

input CustomersDelete {
       filter: CustomersFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     order_item_id: ComparisonOperators
order_id: ComparisonOperators
product_id: ComparisonOperators
quantity: ComparisonOperators
price: ComparisonOperators
currency_type: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
  }


  input Order_itemsCount {
    _count: Int
  } 


  type Order_itemsCountResult {
   action: String
    count: Int!
  }


input Order_itemsLogicalOp {
  _and: [ Order_itemsLogicalOp]
  _or: [ Order_itemsLogicalOp]
   order_item_id: ComparisonOperators
order_id: ComparisonOperators
product_id: ComparisonOperators
quantity: ComparisonOperators
price: ComparisonOperators
currency_type: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
}

input Order_itemsMutationOptions {
    _create: Order_itemsInput
    _update: Order_itemsUpDel
    _delete: Order_itemsDelete
    }

input Order_itemsSortOptions {
  order_item_id: Sort
order_id: Sort
product_id: Sort
quantity: Sort
price: Sort
currency_type: Sort
icon_class: Sort
icon_label: Sort
}

input Order_itemsListOptions {
    filter: Order_itemsFilter
    skip: Int
    take: Int = 15
    sort: Order_itemsSortOptions
    }

type Order_items {
    order_item_id: Int!
order_id: Int
product_id: Int
quantity: Int!
price: Float!
currency_type: String!
icon_class: String
icon_label: String
}

input Order_itemsInput {
    order_id: Int
product_id: Int
quantity: Int!
price: Float!
currency_type: String!
icon_class: String
icon_label: String
}

input Order_itemsFilter {
  _and: [ Order_itemsLogicalOp]
  _or: [ Order_itemsLogicalOp]
}

input Order_itemsUpDel {
    order_id: Int
product_id: Int
quantity: Int
price: Float
currency_type: String
icon_class: String
icon_label: String
       filter: Order_itemsFilter
}

type Order_itemsOutput {
	created: [Order_items]!
	updated: [Order_items]!
	deleted: Int
}

input Order_itemsDelete {
       filter: Order_itemsFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     order_id: ComparisonOperators
order_date: ComparisonOperators
customer_id: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
  }


  input OrdersCount {
    _count: Int
  } 


  type OrdersCountResult {
   action: String
    count: Int!
  }


input OrdersLogicalOp {
  _and: [ OrdersLogicalOp]
  _or: [ OrdersLogicalOp]
   order_id: ComparisonOperators
order_date: ComparisonOperators
customer_id: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
}

input OrdersMutationOptions {
    _create: OrdersInput
    _update: OrdersUpDel
    _delete: OrdersDelete
    }

input OrdersSortOptions {
  order_id: Sort
order_date: Sort
customer_id: Sort
icon_class: Sort
icon_label: Sort
}

input OrdersListOptions {
    filter: OrdersFilter
    skip: Int
    take: Int = 15
    sort: OrdersSortOptions
    }

type Orders {
    order_id: Int!
order_date: String!
customer_id: Int
icon_class: String
icon_label: String
}

input OrdersInput {
    order_date: String!
customer_id: Int
icon_class: String
icon_label: String
}

input OrdersFilter {
  _and: [ OrdersLogicalOp]
  _or: [ OrdersLogicalOp]
}

input OrdersUpDel {
    order_date: String
customer_id: Int
icon_class: String
icon_label: String
       filter: OrdersFilter
}

type OrdersOutput {
	created: [Orders]!
	updated: [Orders]!
	deleted: Int
}

input OrdersDelete {
       filter: OrdersFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     id: ComparisonOperators
order_id: ComparisonOperators
payment_method: ComparisonOperators
payment_date: ComparisonOperators
amount: ComparisonOperators
payment_status: ComparisonOperators
  }


  input PaymentCount {
    _count: Int
  } 


  type PaymentCountResult {
   action: String
    count: Int!
  }


input PaymentLogicalOp {
  _and: [ PaymentLogicalOp]
  _or: [ PaymentLogicalOp]
   id: ComparisonOperators
order_id: ComparisonOperators
payment_method: ComparisonOperators
payment_date: ComparisonOperators
amount: ComparisonOperators
payment_status: ComparisonOperators
}

input PaymentMutationOptions {
    _create: PaymentInput
    _update: PaymentUpDel
    _delete: PaymentDelete
    }

input PaymentSortOptions {
  id: Sort
order_id: Sort
payment_method: Sort
payment_date: Sort
amount: Sort
payment_status: Sort
}

input PaymentListOptions {
    filter: PaymentFilter
    skip: Int
    take: Int = 15
    sort: PaymentSortOptions
    }

type Payment {
    id: String!
order_id: Int!
payment_method: String!
payment_date: String!
amount: Int!
payment_status: String!
}

input PaymentInput {
    order_id: Int!
payment_method: String!
payment_date: String!
amount: Int!
payment_status: String!
}

input PaymentFilter {
  _and: [ PaymentLogicalOp]
  _or: [ PaymentLogicalOp]
}

input PaymentUpDel {
    order_id: Int
payment_method: String
payment_date: String
amount: Int
payment_status: String
       filter: PaymentFilter
}

type PaymentOutput {
	created: [Payment]!
	updated: [Payment]!
	deleted: Int
}

input PaymentDelete {
       filter: PaymentFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     review_id: ComparisonOperators
product_id: ComparisonOperators
customer_id: ComparisonOperators
rating: ComparisonOperators
review_text: ComparisonOperators
review_date: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
  }


  input Product_reviewsCount {
    _count: Int
  } 


  type Product_reviewsCountResult {
   action: String
    count: Int!
  }


input Product_reviewsLogicalOp {
  _and: [ Product_reviewsLogicalOp]
  _or: [ Product_reviewsLogicalOp]
   review_id: ComparisonOperators
product_id: ComparisonOperators
customer_id: ComparisonOperators
rating: ComparisonOperators
review_text: ComparisonOperators
review_date: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
}

input Product_reviewsMutationOptions {
    _create: Product_reviewsInput
    _update: Product_reviewsUpDel
    _delete: Product_reviewsDelete
    }

input Product_reviewsSortOptions {
  review_id: Sort
product_id: Sort
customer_id: Sort
rating: Sort
review_text: Sort
review_date: Sort
icon_class: Sort
icon_label: Sort
}

input Product_reviewsListOptions {
    filter: Product_reviewsFilter
    skip: Int
    take: Int = 15
    sort: Product_reviewsSortOptions
    }

type Product_reviews {
    review_id: Int!
product_id: Int!
customer_id: Int!
rating: Int!
review_text: String!
review_date: String!
icon_class: String
icon_label: String
}

input Product_reviewsInput {
    product_id: Int!
customer_id: Int!
rating: Int!
review_text: String!
review_date: String!
icon_class: String
icon_label: String
}

input Product_reviewsFilter {
  _and: [ Product_reviewsLogicalOp]
  _or: [ Product_reviewsLogicalOp]
}

input Product_reviewsUpDel {
    product_id: Int
customer_id: Int
rating: Int
review_text: String
review_date: String
icon_class: String
icon_label: String
       filter: Product_reviewsFilter
}

type Product_reviewsOutput {
	created: [Product_reviews]!
	updated: [Product_reviews]!
	deleted: Int
}

input Product_reviewsDelete {
       filter: Product_reviewsFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     product_id: ComparisonOperators
product_name: ComparisonOperators
price: ComparisonOperators
currency_type: ComparisonOperators
description: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
  }


  input ProductsCount {
    _count: Int
  } 


  type ProductsCountResult {
   action: String
    count: Int!
  }


input ProductsLogicalOp {
  _and: [ ProductsLogicalOp]
  _or: [ ProductsLogicalOp]
   product_id: ComparisonOperators
product_name: ComparisonOperators
price: ComparisonOperators
currency_type: ComparisonOperators
description: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
}

input ProductsMutationOptions {
    _create: ProductsInput
    _update: ProductsUpDel
    _delete: ProductsDelete
    }

input ProductsSortOptions {
  product_id: Sort
product_name: Sort
price: Sort
currency_type: Sort
description: Sort
icon_class: Sort
icon_label: Sort
}

input ProductsListOptions {
    filter: ProductsFilter
    skip: Int
    take: Int = 15
    sort: ProductsSortOptions
    }

type Products {
    product_id: ID!
product_name: String!
price: Float!
currency_type: String!
description: String!
icon_class: String
icon_label: String
}

input ProductsInput {
    product_name: String!
price: Float!
currency_type: String!
description: String!
icon_class: String
icon_label: String
}

input ProductsFilter {
  _and: [ ProductsLogicalOp]
  _or: [ ProductsLogicalOp]
}

input ProductsUpDel {
    product_name: String
price: Float
currency_type: String
description: String
icon_class: String
icon_label: String
       filter: ProductsFilter
}

type ProductsOutput {
	created: [Products]!
	updated: [Products]!
	deleted: Int
}

input ProductsDelete {
       filter: ProductsFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     shipment_id: ComparisonOperators
order_id: ComparisonOperators
shipment_date: ComparisonOperators
tracking_int: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
  }


  input ShipmentsCount {
    _count: Int
  } 


  type ShipmentsCountResult {
   action: String
    count: Int!
  }


input ShipmentsLogicalOp {
  _and: [ ShipmentsLogicalOp]
  _or: [ ShipmentsLogicalOp]
   shipment_id: ComparisonOperators
order_id: ComparisonOperators
shipment_date: ComparisonOperators
tracking_int: ComparisonOperators
icon_class: ComparisonOperators
icon_label: ComparisonOperators
}

input ShipmentsMutationOptions {
    _create: ShipmentsInput
    _update: ShipmentsUpDel
    _delete: ShipmentsDelete
    }

input ShipmentsSortOptions {
  shipment_id: Sort
order_id: Sort
shipment_date: Sort
tracking_int: Sort
icon_class: Sort
icon_label: Sort
}

input ShipmentsListOptions {
    filter: ShipmentsFilter
    skip: Int
    take: Int = 15
    sort: ShipmentsSortOptions
    }

type Shipments {
    shipment_id: Int!
order_id: Int!
shipment_date: String!
tracking_int: String!
icon_class: String
icon_label: String
}

input ShipmentsInput {
    order_id: Int!
shipment_date: String!
tracking_int: String!
icon_class: String
icon_label: String
}

input ShipmentsFilter {
  _and: [ ShipmentsLogicalOp]
  _or: [ ShipmentsLogicalOp]
}

input ShipmentsUpDel {
    order_id: Int
shipment_date: String
tracking_int: String
icon_class: String
icon_label: String
       filter: ShipmentsFilter
}

type ShipmentsOutput {
	created: [Shipments]!
	updated: [Shipments]!
	deleted: Int
}

input ShipmentsDelete {
       filter: ShipmentsFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     id: ComparisonOperators
password: ComparisonOperators
email: ComparisonOperators
role_id: ComparisonOperators
customer_id: ComparisonOperators
created_at: ComparisonOperators
  }


  input UsersCount {
    _count: Int
  } 


  type UsersCountResult {
   action: String
    count: Int!
  }


input UsersLogicalOp {
  _and: [ UsersLogicalOp]
  _or: [ UsersLogicalOp]
   id: ComparisonOperators
password: ComparisonOperators
email: ComparisonOperators
role_id: ComparisonOperators
customer_id: ComparisonOperators
created_at: ComparisonOperators
}

input UsersMutationOptions {
    _create: UsersInput
    _update: UsersUpDel
    _delete: UsersDelete
    }

input UsersSortOptions {
  id: Sort
password: Sort
email: Sort
role_id: Sort
customer_id: Sort
created_at: Sort
}

input UsersListOptions {
    filter: UsersFilter
    skip: Int
    take: Int = 15
    sort: UsersSortOptions
    }

type Users {
    id: ID!
email: String
role_id: Int
customer_id: Int
created_at: String
}

input UsersInput {
    password: String
email: String
role_id: Int
customer_id: Int
created_at: String
}

input UsersFilter {
  _and: [ UsersLogicalOp]
  _or: [ UsersLogicalOp]
}

input UsersUpDel {
    password: String
email: String
role_id: Int
customer_id: Int
created_at: String
       filter: UsersFilter
}

type UsersOutput {
	created: [Users]!
	updated: [Users]!
	deleted: Int
}

input UsersDelete {
       filter: UsersFilter
}

  input NestedFiltering {
    _and: [NestedFiltering]
    _or: [NestedFiltering]
     id: ComparisonOperators
role_name: ComparisonOperators
  }


  input User_roleCount {
    _count: Int
  } 


  type User_roleCountResult {
   action: String
    count: Int!
  }


input User_roleLogicalOp {
  _and: [ User_roleLogicalOp]
  _or: [ User_roleLogicalOp]
   id: ComparisonOperators
role_name: ComparisonOperators
}

input User_roleMutationOptions {
    _create: User_roleInput
    _update: User_roleUpDel
    _delete: User_roleDelete
    }

input User_roleSortOptions {
  id: Sort
role_name: Sort
}

input User_roleListOptions {
    filter: User_roleFilter
    skip: Int
    take: Int = 15
    sort: User_roleSortOptions
    }

type User_role {
    id: ID!
role_name: String!
}

input User_roleInput {
    role_name: String!
}

input User_roleFilter {
  _and: [ User_roleLogicalOp]
  _or: [ User_roleLogicalOp]
}

input User_roleUpDel {
    role_name: String
       filter: User_roleFilter
}

type User_roleOutput {
	created: [User_role]!
	updated: [User_role]!
	deleted: Int
}

input User_roleDelete {
       filter: User_roleFilter
}

enum ActionType {
  COUNT
  CREATE
  UPDATE
  DELETE
}

enum Sort {
  ASC
  DESC
}

input AuthorizeUser {
  email: String!
  password: String!
}

input RoleInput {
  role: String!
}

type AuthPayload {
  token: Token!
}


type Token {
  accessToken: String!
  idToken: String!
  refreshToken: String!

}

  type TableInfo {
    table: String
    structure: String
  }