
type Query {
    categories(input: ResolversCategories): [Categories]
customers(input: ResolversCustomers): [Customers]
order_items(input: ResolversOrder_items): [Order_items]
orders(input: ResolversOrders): [Orders]
payment(input: ResolversPayment): [Payment]
product_reviews(input: ResolversProduct_reviews): [Product_reviews]
products(input: ResolversProducts): [Products]
shipments(input: ResolversShipments): [Shipments]
users(input: ResolversUsers): [Users]
userRole(input: ResolversUserRole): [UserRole]
}

type Mutation {
  authorize(input: AuthorizeUser!): AuthPayload!
    categories(input: ResolversCategories): CategoriesOutput
customers(input: ResolversCustomers): CustomersOutput
order_items(input: ResolversOrder_items): Order_itemsOutput
orders(input: ResolversOrders): OrdersOutput
payment(input: ResolversPayment): PaymentOutput
product_reviews(input: ResolversProduct_reviews): Product_reviewsOutput
products(input: ResolversProducts): ProductsOutput
shipments(input: ResolversShipments): ShipmentsOutput
users(input: ResolversUsers): UsersOutput
userRole(input: ResolversUserRole): UserRoleOutput
}

input ResolversCategories {
    filter: CategoriesFilter
	action: String
    create: [CategoriesInput]
	update: CategoriesUpdate
    operators: Operators
}

type Categories {
    category_id: Int!
category_name: String
icon_class: String
icon_label: String
}

input CategoriesInput {
    category_id: Int!
category_name: String
icon_class: String
icon_label: String
}

input CategoriesFilter {
    category_id: [Int]
category_name: [String]
icon_class: [String]
icon_label: [String]
}

input CategoriesUpdate {
    category_id: Int
category_name: String
icon_class: String
icon_label: String
}

type CategoriesOutput {
	created: [Categories]!
	updated: [Categories]!
	deleted: Int
}

input ResolversCustomers {
    filter: CustomersFilter
	action: String
    create: [CustomersInput]
	update: CustomersUpdate
    operators: Operators
}

type Customers {
    customer_id: Int!
customer_name: String
email: String
icon_class: String
icon_label: String
}

input CustomersInput {
    customer_id: Int!
customer_name: String
email: String
icon_class: String
icon_label: String
}

input CustomersFilter {
    customer_id: [Int]
customer_name: [String]
email: [String]
icon_class: [String]
icon_label: [String]
}

input CustomersUpdate {
    customer_id: Int
customer_name: String
email: String
icon_class: String
icon_label: String
}

type CustomersOutput {
	created: [Customers]!
	updated: [Customers]!
	deleted: Int
}

input ResolversOrder_items {
    filter: Order_itemsFilter
	action: String
    create: [Order_itemsInput]
	update: Order_itemsUpdate
    operators: Operators
}

type Order_items {
    order_item_id: Int!
order_id: Int
product_id: Int
quantity: Int
price: Float
icon_class: String
icon_label: String
}

input Order_itemsInput {
    order_item_id: Int!
order_id: Int
product_id: Int
quantity: Int
price: Float
icon_class: String
icon_label: String
}

input Order_itemsFilter {
    order_item_id: [Int]
order_id: [Int]
product_id: [Int]
quantity: [Int]
price: [Float]
icon_class: [String]
icon_label: [String]
}

input Order_itemsUpdate {
    order_item_id: Int
order_id: Int
product_id: Int
quantity: Int
price: Float
icon_class: String
icon_label: String
}

type Order_itemsOutput {
	created: [Order_items]!
	updated: [Order_items]!
	deleted: Int
}

input ResolversOrders {
    filter: OrdersFilter
	action: String
    create: [OrdersInput]
	update: OrdersUpdate
    operators: Operators
}

type Orders {
    order_id: Int!
order_date: String
customer_id: Int
icon_class: String
icon_label: String
}

input OrdersInput {
    order_id: Int!
order_date: String
customer_id: Int
icon_class: String
icon_label: String
}

input OrdersFilter {
    order_id: [Int]
order_date: [String]
customer_id: [Int]
icon_class: [String]
icon_label: [String]
}

input OrdersUpdate {
    order_id: Int
order_date: String
customer_id: Int
icon_class: String
icon_label: String
}

type OrdersOutput {
	created: [Orders]!
	updated: [Orders]!
	deleted: Int
}

input ResolversPayment {
    filter: PaymentFilter
	action: String
    create: [PaymentInput]
	update: PaymentUpdate
    operators: Operators
}

type Payment {
    id: String!
order_id: Int!
payment_method: String!
payment_date: String!
amount: Int!
payment_status: String!
}

input PaymentInput {
    order_id: Int!
payment_method: String!
payment_date: String!
amount: Int!
payment_status: String!
}

input PaymentFilter {
    id: [String]
order_id: [Int]
payment_method: [String]
payment_date: [String]
amount: [Int]
payment_status: [String]
}

input PaymentUpdate {
    id: String
order_id: Int
payment_method: String
payment_date: String
amount: Int
payment_status: String
}

type PaymentOutput {
	created: [Payment]!
	updated: [Payment]!
	deleted: Int
}

input ResolversProduct_reviews {
    filter: Product_reviewsFilter
	action: String
    create: [Product_reviewsInput]
	update: Product_reviewsUpdate
    operators: Operators
}

type Product_reviews {
    review_id: Int!
product_id: Int
customer_id: Int
rating: Int
review_text: String
review_date: String
icon_class: String
icon_label: String
}

input Product_reviewsInput {
    review_id: Int!
product_id: Int
customer_id: Int
rating: Int
review_text: String
review_date: String
icon_class: String
icon_label: String
}

input Product_reviewsFilter {
    review_id: [Int]
product_id: [Int]
customer_id: [Int]
rating: [Int]
review_text: [String]
review_date: [String]
icon_class: [String]
icon_label: [String]
}

input Product_reviewsUpdate {
    review_id: Int
product_id: Int
customer_id: Int
rating: Int
review_text: String
review_date: String
icon_class: String
icon_label: String
}

type Product_reviewsOutput {
	created: [Product_reviews]!
	updated: [Product_reviews]!
	deleted: Int
}

input ResolversProducts {
    filter: ProductsFilter
	action: String
    create: [ProductsInput]
	update: ProductsUpdate
    operators: Operators
}

type Products {
    product_id: Int!
product_name: String
price: Float
description: String
icon_class: String
icon_label: String
}

input ProductsInput {
    product_id: Int!
product_name: String
price: Float
description: String
icon_class: String
icon_label: String
}

input ProductsFilter {
    product_id: [Int]
product_name: [String]
price: [Float]
description: [String]
icon_class: [String]
icon_label: [String]
}

input ProductsUpdate {
    product_id: Int
product_name: String
price: Float
description: String
icon_class: String
icon_label: String
}

type ProductsOutput {
	created: [Products]!
	updated: [Products]!
	deleted: Int
}

input ResolversShipments {
    filter: ShipmentsFilter
	action: String
    create: [ShipmentsInput]
	update: ShipmentsUpdate
    operators: Operators
}

type Shipments {
    shipment_id: Int!
order_id: Int
shipment_date: String
tracking_number: String
icon_class: String
icon_label: String
}

input ShipmentsInput {
    shipment_id: Int!
order_id: Int
shipment_date: String
tracking_number: String
icon_class: String
icon_label: String
}

input ShipmentsFilter {
    shipment_id: [Int]
order_id: [Int]
shipment_date: [String]
tracking_number: [String]
icon_class: [String]
icon_label: [String]
}

input ShipmentsUpdate {
    shipment_id: Int
order_id: Int
shipment_date: String
tracking_number: String
icon_class: String
icon_label: String
}

type ShipmentsOutput {
	created: [Shipments]!
	updated: [Shipments]!
	deleted: Int
}

input ResolversUsers {
    filter: UsersFilter
	action: String
    create: [UsersInput]
	update: UsersUpdate
    operators: Operators
}

type Users {
    id: String!
email: String!
role_id: Int!
customer_id: Int!
created_at: String!
}

input UsersInput {
    password: String!
email: String!
role_id: Int!
customer_id: Int!
created_at: String!
}

input UsersFilter {
    id: [String]
email: [String]
role_id: [Int]
customer_id: [Int]
created_at: [String]
}

input UsersUpdate {
    id: String
email: String
role_id: Int
customer_id: Int
created_at: String
}

type UsersOutput {
	created: [Users]!
	updated: [Users]!
	deleted: Int
}

input ResolversUserRole {
    filter: UserRoleFilter
	action: String
    create: [UserRoleInput]
	update: UserRoleUpdate
    operators: Operators
}

type UserRole {
    id: String!
role_name: String!
}

input UserRoleInput {
    role_name: String!
}

input UserRoleFilter {
    id: [String]
role_name: [String]
}

input UserRoleUpdate {
    id: String
role_name: String
}

type UserRoleOutput {
	created: [UserRole]!
	updated: [UserRole]!
	deleted: Int
}

enum Operators {
    EQ
    GT
    LT
}

input AuthorizeUser {
  email: String!
  password: String!
}

input RoleInput {
  role: String!
}

input AuthorizeUser {
  email: String!
  password: String!
}

input RoleInput {
  role: String!
}

type AuthPayload {
  token: Token!
}

type Token {
  accessToken: String!
  idToken: String!
  refreshToken: String!
}